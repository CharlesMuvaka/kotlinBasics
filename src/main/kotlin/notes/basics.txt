                             Kotlin
1.Keywords
- These are words that have a special meaning to the compiler.
- They are categorised into three
   1. Hard keywords
   2.Soft Keywords
   3.Modifier keywords
2. Variables
-These are containers used for storing data in a program
- Kotlin uses two keywords to declare variables
    1.var keyword - used for storing mutable variables, Variables that can change as the program continues
    2.val -keyword - used for storing immutable values, values that don't change throughout the lifecycle of a program.
    NOTE: the dollar sign can be used to access a specific variable inside a string

    The var keyword stores mutable values while the val keyword is used to store ReadOnly values or immutable values.

    Variable Types
 - you can explicitly define the type of variable using a colon at the end of the variable name, followed by its type.
 Although you can define a variable without defining its type. Kotlin will understand its type.
 - The importance of declaring a variable type is to define whether a variable can be equivalent to null
    NOTE - kotlin checks for null values by default and a variable isn't supposed to be null.
    To tell the compiler that a variable can be null,
        1. We can assign the variable to be null with its type indicated
        2. We can add a question mark at the end of the type of the variable.

    Data Types
    - This is classification of data that tells the compiler how a programmer intends to use it.
    - Kotlin treats everything as an object therefore we can call member functions and any properties on the variable
    - Kotlin supports
        1. Number data types
        2. character data types
        3. String data types
        4. Boolean data types
        5. reference data types

       1. Number data types
       - they are used for storing numeric values
       - they are further classified into two
        1. Integer data types - They are used for storing whole numbers, either positive or negative.
                               - they are further classified into
                                 byte - stores 8 bits from 0000 0000 to 1111 1111
                                 short - stores 16 bits from 0000 0000 0000 0000 to  1111 1111 1111 1111
                                 int - stores 32 bits
                                 long - stores 64 bits
        NOTE: if you specify a data type smaller compared to the amount it stores, an error is generated.
        2.Floating types - They are used for storing numbers that contain decimals
                         - They are further classified into
                           float - stores 32 bits and must be denoted with an f at the end.
                           double - stores 64 bits

      2. Character types
      - They store single values enclosed into single quotation marks
      - It is denoted using the Char keyword
      - kotlin also supports a number of escape sequences - these are characters that are followed by the backslash(\)
        \n - it represents a new line.

      3. String types
        - A string is a group of characters together.
        -kotlin defines two types of strings
            1. Escaped strings -  Enclosed within double quotes and can contain escape sequences in them.
            2. Raw strings - Enclosed within three quotation marks and are displayed the way they are written.

      4. Boolean data types
        -A boolean stores either one of the two values, true or false.
        - Boolean keyword is used to define the type

      5. Arrays
        - variables that store a collection of homogenous data. Data of the same kind together.

    Data type Conversion
     - Kotlin doesn't support direct conversion of variables thus it provides in built methods that can be used for numeric conversion.
     - They include
        1. toByte() - converts a type to byte
        2. toShort() -
        2. toInt() -
        2. toLong() -
        2. toFloat() -

      Arrays
       - containers used to store multiple variables of the same data type.
       - To create an array we use the arrayOf method of arrays
            example val students  = arrayOf("Charles", "Muvaka", "Kata")
       - to specify the type of the array, we specify it inside the arrayOf method as a generic
            example val students = arrayOf<String>("Charles", "Muvaka", "Kata")

       - Primitive data types contain special methods to define an array. They include
            1. intArrayOf() - creates an array of integers
            2. longArrayOf() - creates an array of long datatype
            3. byteArrayOf() - create a bytes array
            4. shortArrayOf() - create a shorts array

         Accessing elements of an array
         - There are several ways to access elements in an array in Kotlin
            1. Using square brackets with the index of the array specified
            2. using the get method
                example var firstName = students[0]  //indices start at position 0
                    or var firstName = students.get(0)

         NOTE - in kotlin arrays are mutable - values can change.
          - we can use the set() method to set a certain value at the specified index.
                eg students.set(3, "James")

          Getting the length of an array
          - There are to ways to check the size of an array
            1.count() - a member function that returns the size of the array.
            2. size -  member variable to access the arrays size

          Dropping elements in an array
          _ there are two methods provided
            1. drop() - a member function that drops elements from their beginning.
            2. dropLast() - a member function that drops elements from their end.

          In Keyword in arrays
           - can be used to loop through an array or to check if a certain element exists in the array.

          As Keyword
           - Used to cast one type to another

          By Keyword
           - Used to delegate design patterns of a blue-print to an instance


