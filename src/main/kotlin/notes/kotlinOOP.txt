
        kotlin - OOP
 - kotlin is both a functional and Object-Oriented Programming language.
 - It expresses its functional nature using functions, lambdas or high order functions
 - It uses classes as an Object-Oriented language

        Classes
  - These are blueprints that define the template of an object.
  - To create a class we use the class Keyword followed by the name of the class.
  - A class contains a header and a body.
  - The header is the declaration and the name of the class.
  -The body is encapsulated in curly braces and contains the member variables and methods of the class.
  - By default a class is public, it can be accessed from outside its package.
  - Example
        class Student{ // class header
            val id: Int
            val name: String // class body
        }

        Objects
  - This is an instance of a class
  - Formed by assigning a variable to a class
  - Example
        val studentOne = student();
  - We can access the members and properties of an object using the dot notation.
  Example
        studentOne.id = 1 // assigning the students id's value.
        student.name //getting the students name value

        Nested Classes
  This are classes that are inside other classes.
  - In kotlin these classes are static by default - You can access them directly using their outer class.
  - Inside the nested class you cannot access the members of the outer class.
  - Example.
        class RecyclerAdapter: RecyclerView.Adapter<RecyclerAdapter.MyHolder>(){}
        // both Adapter and MyHolder are nested classes inside the RecyclerView and the RecyclerAdapter respectively.

        Inner Classes
  - These are nested classes marked with the inner keyword
  - They are the opposite of Nested classes
  - They are non-static - We access them by instances of the class.
  - They can access members of the outer class.

        Sealed Classes
    These are restricted class hierarchies that provide more control over inheritance.
    All its subclasses and objects are known during compile time.



    Kotlin Functions
   - A function is a block of code specified to perform a certain task.
   - Kotlin functions are defined using the fun keyword.

   Example
        fun printHelloWorld(){
            println("Hello world")
        }

            Function parameters
        - These are special variables that are used to pass data in the function.
        - They allow functions to perform task without the knowledge of the real values ahead in time.
        - Kotlin functions accept parameters, they can be named in the case of a function that takes in many parameters or the conventional java approach.
            NOTE: 1. When using the conventional java way of passing parameters, they must be arranged in the way they follow each other.
                  Named parameters can be passed in any manner defining their initial parameter names.
                  2. You must explicitly specify the data type of the parameters.

                  Example:
                        fun calculateTotalPay(amount: Int, allowances: Int, deductions: Double){
                            val total = (amount + allowances) - deductions
                        }

            Calling functions.
           - Functions are called by specifying the function name followed by adding the parameters it requires.
           - A function can be declared without parameters.

                Example
                        1. Named parameters without specifying the precedence ordering
                        calculateTotalPay(deductions = 1000.09, allowances = 2000000, amount = 10000000)

                        2. unNamed parameters - The precedence of the parameters must be considered.
                            calculateTotalPay(10000000,2000000,1000.09 )

             Function return types.
            - A function can return a value or not.
            - Functions that don't return a value are said to be unit functions. The return type can be specified or not.
                Example:
                      Case 1
                        fun calculateBMI(weight: Double, height: Double, age: Int): Unit{
                            var bmi = (weight * height)/ age
                        }

                      Case 2
                        fun calculateBMI(weight: Double, height: Double, age: Int){
                            var bmi = (weight * height)/ age
                        }

                Both cases are valid and acceptable.

             - When a function is said to return a value, the return type of the value must be specified.
             Example
                    fun calculateBMI(age: Int, weight: Double, height: Double): Double{
                        var bmi: Double = (weight * height)/ age
                        return bmi
                    }

            Single expression functions.
           - These are functions that don't have blocks of codes. They actually have  single line in them s the name suggests.
           - The return types of these functions don't have to specified. The compiler csn infer their return types.
            Example
                fun calculateBMI(weight: Double, height: Double, age: Int) = (weight * height)/ age

            Default parameters
           - These are parameters that have an initial value in them.


